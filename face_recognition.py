# -*- coding: utf-8 -*-
"""faceRecognition-.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JJv8x69NQyvhyNzXzOHdMqjlsfa7u9e6

Step-2 :

Load the faceNet Model and  create face embeddings
the face embeddings are the vectors that represent the features of face
in vector form
"""

!pip install tensorflow==1.14.0

# import modules
import numpy as np
import pandas as pd
from PIL import Image
from numpy import asarray
import cv2
import os
import matplotlib.pyplot as plt

from keras.models import load_model

# load the dataset

data = np.load('faces.npz')
x_train, y_train, x_test, y_test =  data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3']

# load the model and check inputs and outputs

model = load_model('facenet_keras.h5')

print(model.input)
print(model.output)

def get_embeddings(model, face):
  # standardize the face pixels as required by the model
  face = face.astype('float32')
  mean, std = face.mean(), face.std()
  face = (face - mean)/std
  face = np.expand_dims(face, axis=0)
  y_hat = model.predict(face)
  return y_hat[0]

# convert each face in the train and test set to embeddings

new_X_train = list()

for face in x_train:
  embeddings = get_embeddings(model, face)
  new_X_train.append(embeddings)

new_X_train = np.asarray(new_X_train)

new_X_test = list()

for face in x_test:
  embeddings = get_embeddings(model, face)
  new_X_test.append(embeddings)

new_X_test = np.asarray(new_X_test)

# save embeddings to npz file

np.savez_compressed('face_embeddings.npz',new_X_train, y_train, new_X_test, y_test)

# Load the face embeddings and target variables

data = np.load('face_embeddings.npz')
new_X_train, y_train, new_X_test, y_test = data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3']

# USING PCA to extract principle components and see the differenct represenetation of faces

from sklearn.decomposition import PCA

pca = PCA(n_components=2)
pca_features = pca.fit_transform(new_X_train)

# plot the features
df = pd.DataFrame(pca_features)

df['target'] = y_train

x_train.shape
x_test.shape

import seaborn
plt.figure(figsize=(12, 6))
seaborn.scatterplot(df[0], df[1],hue=df['target'])

plt.savefig('principle_componets_of_embs.png')

# importing required model for classification

from sklearn.preprocessing import Normalizer, LabelEncoder
from sklearn.svm import SVC
from random import choice

from sklearn import metrics

"""Step:3  Face classification using embedding vectors"""

# fit a svm model to the data
# preprocessing
# Normalizing the vectors
norm = Normalizer(norm='l2')

new_X_train = norm.transform(new_X_train)
new_X_test = norm.transform(new_X_test)

encoder = LabelEncoder()
encoder = encoder.fit(y_train)
y_train = encoder.transform(y_train)
y_test = encoder.transform(y_test)

# import model and fit

svm_model = SVC(kernel='linear',,probability=True)
svm_model.fit(new_X_train, y_train)

from sklearn.neighbors import KNeighborsClassifier
svm_model = KNeighborsClassifier(n_neighbors = 10, metric = 'minkowski', p = 2)
svm_model.fit(new_X_train, y_train)

yhat_train = svm_model.predict(new_X_train)
yhat_test = svm_model.predict(new_X_test)

train_acc = metrics.accuracy_score(y_train, yhat_train)
test_acc = metrics.accuracy_score(y_test, yhat_test)

print('Accuracy: train=%.3f, test=%.3f' % (train_acc*100, test_acc*100))

# test model on a random example from the test dataset
selection = choice([i for i in range(x_test.shape[0])])
random_face_pixels =x_test[selection]
random_face_emb = new_X_test[selection]
random_face_class = y_test[selection]
random_face_name = encoder.inverse_transform([random_face_class])
# prediction for the face
samples = np.expand_dims(random_face_emb, axis=0)
yhat_class = svm_model.predict(samples)
yhat_prob = svm_model.predict_proba(samples)
# get name
class_index = yhat_class[0]
class_probability = yhat_prob[0,class_index] * 100
predict_names = encoder.inverse_transform(yhat_class)
print('Predicted: %s (%.3f)' % (predict_names[0], class_probability))
print('Expected: %s' % random_face_name[0])

# ploting the images
plt.imshow(random_face_pixels)
title = '%s (%.3f percent probability)' % (predict_names[0], class_probability)
plt.title(title)
plt.show()

# probability distribution
yhat_prob

print("success")

